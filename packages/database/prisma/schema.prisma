// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client { 
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User{
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authentications                   Authentication[]

  Courses       Course[]     @relation("Course")
  enrollments   Enrollment[]
  submissions   Submission[]
  grades        Grade[]
  messagesSent  Message[]    @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
}
model Authentication {
  id           Int      @id @default(autoincrement())
  provider     String
  providerId   String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([provider, providerId])
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  //user        User @relation(fields: [instructorId], references: [id])
  instructorId Int

  enrollments Enrollment[]
  assignments Assignment[]

  User User[] @relation("Course")
}

model Enrollment {
  id        Int   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  enrolledAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  course      Course    @relation(fields: [courseId], references: [id])
  courseId    Int

  submissions Submission[]
  
}

model Submission {
  id          Int      @id @default(autoincrement())
  content     String
  submittedAt DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int

  student     User       @relation(fields: [studentId], references: [id])
  studentId   Int

  grade       Grade?
}

model Grade {
  id          Int      @id @default(autoincrement())
  score       Float
  feedback    String?
  gradedAt    DateTime  @default(now())

  submission  Submission @relation(fields: [submissionId], references: [id])
  submissionId Int @unique
  grader      User       @relation(fields: [graderId], references: [id])
  graderId    Int
}

model Message {
  id          Int         @id @default(autoincrement())
  content     String
  sentAt      DateTime    @default(now())
  status      MessageStatus @default(SENT)

  sender      User        @relation("MessagesSent", fields: [senderId], references: [id])
  senderId    Int

  receiver    User        @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId  Int
}

enum MessageStatus {
  SENT
  DRAFT
  READ
  UNREAD
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}